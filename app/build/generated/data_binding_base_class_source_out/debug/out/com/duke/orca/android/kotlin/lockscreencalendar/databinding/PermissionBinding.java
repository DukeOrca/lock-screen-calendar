// Generated by view binder compiler. Do not edit!
package com.duke.orca.android.kotlin.lockscreencalendar.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.duke.orca.android.kotlin.lockscreencalendar.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PermissionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final ImageView imageViewIcon;

  @NonNull
  public final TextView textViewPermission;

  @NonNull
  public final View viewDivider;

  private PermissionBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout constraintLayout, @NonNull ImageView imageViewIcon,
      @NonNull TextView textViewPermission, @NonNull View viewDivider) {
    this.rootView = rootView;
    this.constraintLayout = constraintLayout;
    this.imageViewIcon = imageViewIcon;
    this.textViewPermission = textViewPermission;
    this.viewDivider = viewDivider;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PermissionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PermissionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.permission, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PermissionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout constraintLayout = (ConstraintLayout) rootView;

      id = R.id.image_view_icon;
      ImageView imageViewIcon = ViewBindings.findChildViewById(rootView, id);
      if (imageViewIcon == null) {
        break missingId;
      }

      id = R.id.text_view_permission;
      TextView textViewPermission = ViewBindings.findChildViewById(rootView, id);
      if (textViewPermission == null) {
        break missingId;
      }

      id = R.id.view_divider;
      View viewDivider = ViewBindings.findChildViewById(rootView, id);
      if (viewDivider == null) {
        break missingId;
      }

      return new PermissionBinding((ConstraintLayout) rootView, constraintLayout, imageViewIcon,
          textViewPermission, viewDivider);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
