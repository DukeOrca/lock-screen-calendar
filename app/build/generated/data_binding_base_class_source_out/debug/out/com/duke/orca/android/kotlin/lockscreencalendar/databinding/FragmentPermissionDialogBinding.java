// Generated by view binder compiler. Do not edit!
package com.duke.orca.android.kotlin.lockscreencalendar.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.duke.orca.android.kotlin.lockscreencalendar.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPermissionDialogBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final TextView textViewAllow;

  @NonNull
  public final TextView textViewDeny;

  @NonNull
  public final TextView textViewPermissionRationale;

  @NonNull
  public final TextView textViewTitle;

  @NonNull
  public final View viewDividerBottom;

  @NonNull
  public final View viewDividerTop;

  private FragmentPermissionDialogBinding(@NonNull RelativeLayout rootView,
      @NonNull RecyclerView recyclerView, @NonNull TextView textViewAllow,
      @NonNull TextView textViewDeny, @NonNull TextView textViewPermissionRationale,
      @NonNull TextView textViewTitle, @NonNull View viewDividerBottom,
      @NonNull View viewDividerTop) {
    this.rootView = rootView;
    this.recyclerView = recyclerView;
    this.textViewAllow = textViewAllow;
    this.textViewDeny = textViewDeny;
    this.textViewPermissionRationale = textViewPermissionRationale;
    this.textViewTitle = textViewTitle;
    this.viewDividerBottom = viewDividerBottom;
    this.viewDividerTop = viewDividerTop;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPermissionDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPermissionDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_permission_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPermissionDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.recycler_view;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.text_view_allow;
      TextView textViewAllow = ViewBindings.findChildViewById(rootView, id);
      if (textViewAllow == null) {
        break missingId;
      }

      id = R.id.text_view_deny;
      TextView textViewDeny = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeny == null) {
        break missingId;
      }

      id = R.id.text_view_permission_rationale;
      TextView textViewPermissionRationale = ViewBindings.findChildViewById(rootView, id);
      if (textViewPermissionRationale == null) {
        break missingId;
      }

      id = R.id.text_view_title;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      id = R.id.view_divider_bottom;
      View viewDividerBottom = ViewBindings.findChildViewById(rootView, id);
      if (viewDividerBottom == null) {
        break missingId;
      }

      id = R.id.view_divider_top;
      View viewDividerTop = ViewBindings.findChildViewById(rootView, id);
      if (viewDividerTop == null) {
        break missingId;
      }

      return new FragmentPermissionDialogBinding((RelativeLayout) rootView, recyclerView,
          textViewAllow, textViewDeny, textViewPermissionRationale, textViewTitle,
          viewDividerBottom, viewDividerTop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
